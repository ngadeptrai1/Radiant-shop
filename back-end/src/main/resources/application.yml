access-token:
  private: ${ACCESS_TOKEN_PRIVATE_KEY_PATH}
  public: ${ACCESS_TOKEN_PUBLIC_KEY_PATH}
refresh-token:
  private: ${REFRESH_TOKEN_PRIVATE_KEY_PATH}
  public: ${REFRESH_TOKEN_PUBLIC_KEY_PATH}

logging:
  level:
    org.springframework.security: debug

spring:
  profiles:
    active: dev , secrets
  application:
    name: cosmetic
  datasource:
    driverClassName: org.postgresql.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password:  ${DB_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

        jdbc:
          lob:
            non_contextual_creation: true
      jdbc:
        batch_size: 50
        fetch_size: 50
      query:
        in_clause_parameter_padding: true
        fail_on_pagination_over_collection_fetch: false
        plan_cache_max_size: 2048
  sql:
    init:
      mode: always

  security:
    oauth2:
      client:
        registration:
          facebook:
            client-id: ${OAUTH2_FACEBOOK_CLIENT_ID}
            client-secret: ${OAUTH2_FACEBOOK_CLIENT_SECRET}

          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
